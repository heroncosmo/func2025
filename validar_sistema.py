#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VALIDADOR AUTOM√ÅTICO - Sistema Funcion√°rioIA
Verifica se todos os componentes est√£o funcionando corretamente
"""

import requests
import time
import subprocess
import json
from pathlib import Path

class ValidadorSistema:
    def __init__(self):
        self.base_url = "http://localhost:5173"
        self.projeto_path = Path("agent-aloha-ai")
        
    def verificar_servidor_rodando(self):
        """Verifica se o servidor React est√° rodando"""
        try:
            response = requests.get(self.base_url, timeout=5)
            if response.status_code == 200:
                print("‚úÖ SERVIDOR REACT FUNCIONANDO")
                return True
            else:
                print(f"‚ùå SERVIDOR REACT RETORNOU STATUS: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå SERVIDOR REACT N√ÉO RESPONDE: {e}")
            return False
    
    def verificar_estrutura_arquivos(self):
        """Verifica se todos os arquivos essenciais existem"""
        arquivos_essenciais = [
            "agent-aloha-ai/package.json",
            "agent-aloha-ai/src/App.tsx", 
            "agent-aloha-ai/src/components/MonetizedAgentBuilder.tsx",
            "agent-aloha-ai/src/components/CalibrationChat.tsx",
            "agent-aloha-ai/src/components/ConfigurationEditor.tsx",
            "iniciar_sistema.bat",
            "teste_fluxo_completo.py",
            "teste_manual_validacao.md"
        ]
        
        print("\nüîç VERIFICANDO ESTRUTURA DE ARQUIVOS...")
        todos_ok = True
        
        for arquivo in arquivos_essenciais:
            if Path(arquivo).exists():
                print(f"‚úÖ {arquivo}")
            else:
                print(f"‚ùå {arquivo} - FALTANDO!")
                todos_ok = False
        
        return todos_ok
    
    def verificar_dependencias(self):
        """Verifica se as depend√™ncias est√£o instaladas"""
        print("\nüîç VERIFICANDO DEPEND√äNCIAS...")
        
        node_modules = self.projeto_path / "node_modules"
        package_lock = self.projeto_path / "package-lock.json"
        
        if node_modules.exists() and package_lock.exists():
            print("‚úÖ DEPEND√äNCIAS INSTALADAS")
            return True
        else:
            print("‚ùå DEPEND√äNCIAS N√ÉO INSTALADAS")
            return False
    
    def verificar_logica_python(self):
        """Executa o teste Python para validar a l√≥gica"""
        print("\nüß™ EXECUTANDO TESTE L√ìGICA PYTHON...")
        
        try:
            resultado = subprocess.run(
                ["python", "teste_fluxo_completo.py"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if resultado.returncode == 0:
                output = resultado.stdout
                
                # Verificar se os testes passaram
                if "üéâ CONFIGURA√á√ÉO COMPLETA!" in output and "100% completo" in output:
                    print("‚úÖ L√ìGICA PYTHON FUNCIONANDO")
                    
                    # Contar quantos estabelecimentos foram configurados 100%
                    configurados_100 = output.count("100% completo")
                    print(f"‚úÖ {configurados_100} ESTABELECIMENTOS CONFIGURADOS 100%")
                    
                    return True
                else:
                    print("‚ùå L√ìGICA PYTHON COM PROBLEMAS")
                    print("OUTPUT:", output[:500])
                    return False
            else:
                print(f"‚ùå ERRO NA EXECU√á√ÉO: {resultado.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå TIMEOUT NO TESTE PYTHON")
            return False
        except Exception as e:
            print(f"‚ùå ERRO EXECUTANDO TESTE: {e}")
            return False
    
    def verificar_codigo_react(self):
        """Verifica se o c√≥digo React tem as funcionalidades corretas"""
        print("\nüîç VERIFICANDO C√ìDIGO REACT...")
        
        # Verificar CalibrationChat.tsx
        calibration_file = self.projeto_path / "src/components/CalibrationChat.tsx"
        
        if not calibration_file.exists():
            print("‚ùå CalibrationChat.tsx N√ÉO ENCONTRADO")
            return False
            
        with open(calibration_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verifica√ß√µes cr√≠ticas
        verificacoes = [
            ("ESTRAT√âGIA 1", "detectar nome inteligente"),
            ("mistral-large", "modelo correto"),
            ("analyzeAndUpdateAgent", "fun√ß√£o de an√°lise"),
            ("detectarNomeInteligente", "detec√ß√£o de nome"),
            ("TEMPLATE RESTAURANTE", "template autom√°tico"),
            ("businessName", "dados do agente")
        ]
        
        todas_ok = True
        for termo, descricao in verificacoes:
            if termo.lower() in content.lower():
                print(f"‚úÖ {descricao.upper()}")
            else:
                print(f"‚ùå {descricao.upper()} - FALTANDO!")
                todas_ok = False
        
        return todas_ok
    
    def gerar_relatorio(self):
        """Gera relat√≥rio completo do sistema"""
        print(f"\n{'='*60}")
        print("üìä RELAT√ìRIO COMPLETO DO SISTEMA")
        print(f"{'='*60}")
        
        testes = [
            ("Servidor React", self.verificar_servidor_rodando),
            ("Estrutura de Arquivos", self.verificar_estrutura_arquivos),
            ("Depend√™ncias", self.verificar_dependencias),
            ("L√≥gica Python", self.verificar_logica_python),
            ("C√≥digo React", self.verificar_codigo_react)
        ]
        
        resultados = {}
        total_testes = len(testes)
        testes_passaram = 0
        
        for nome, teste_func in testes:
            print(f"\nüß™ EXECUTANDO: {nome}")
            resultado = teste_func()
            resultados[nome] = resultado
            
            if resultado:
                testes_passaram += 1
                print(f"‚úÖ {nome}: PASSOU")
            else:
                print(f"‚ùå {nome}: FALHOU")
        
        # Resumo final
        print(f"\n{'='*60}")
        print("üèÜ RESUMO FINAL")
        print(f"{'='*60}")
        print(f"‚úÖ TESTES PASSARAM: {testes_passaram}/{total_testes}")
        print(f"üìä TAXA DE SUCESSO: {(testes_passaram/total_testes)*100:.1f}%")
        
        if testes_passaram == total_testes:
            print("\nüéâ SISTEMA 100% FUNCIONAL!")
            print("üöÄ PRONTO PARA PRODU√á√ÉO!")
            return True
        else:
            print(f"\n‚ö†Ô∏è SISTEMA {(testes_passaram/total_testes)*100:.1f}% FUNCIONAL")
            print("üîß REQUER AJUSTES ANTES DA PRODU√á√ÉO")
            
            # Listar problemas
            print("\n‚ùå PROBLEMAS ENCONTRADOS:")
            for nome, resultado in resultados.items():
                if not resultado:
                    print(f"  ‚Ä¢ {nome}")
            
            return False

def main():
    """Fun√ß√£o principal"""
    print("üîß VALIDADOR AUTOM√ÅTICO - Funcion√°rioIA")
    print("Verificando todos os componentes do sistema...\n")
    
    validador = ValidadorSistema()
    sistema_ok = validador.gerar_relatorio()
    
    if sistema_ok:
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. ‚úÖ Sistema validado e funcionando")
        print("2. üåê Acesse: http://localhost:5173")
        print("3. üß™ Execute teste manual: teste_manual_validacao.md") 
        print("4. üöÄ Deploy para produ√ß√£o quando pronto")
    else:
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        print("1. Corrigir problemas encontrados")
        print("2. Executar validador novamente")
        print("3. S√≥ fazer deploy ap√≥s 100% dos testes passarem")

if __name__ == "__main__":
    main() 