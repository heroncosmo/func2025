#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE FLUXO COMPLETO - Sistema Funcion√°rioIA
Simula conversa√ß√£o completa at√© configurar 100% estabelecimentos
"""

import re
import json
from typing import Dict, List, Optional

class AgentData:
    def __init__(self):
        self.businessName = "Como vai ser o nome do seu"
        self.businessType = ""
        self.contactPhone = "(xx) xxxxx-xxxx"
        self.location = "Endere√ßo a ser definido"
        self.services = "Lista de servi√ßos ser√° criada automaticamente"
        self.workingHours = ""
        self.paymentMethods = ""
        self.personality = ""

    def to_dict(self):
        return {
            'businessName': self.businessName,
            'businessType': self.businessType,
            'contactPhone': self.contactPhone,
            'location': self.location,
            'services': self.services,
            'workingHours': self.workingHours,
            'paymentMethods': self.paymentMethods,
            'personality': self.personality
        }

    def get_completion_status(self):
        """Retorna % de conclus√£o e campos faltantes"""
        total_fields = 8
        completed = 0
        missing = []
        
        if self.businessName and len(self.businessName) > 3 and "nome do seu" not in self.businessName.lower():
            completed += 1
        else:
            missing.append("NOME")
            
        if self.businessType:
            completed += 1
        else:
            missing.append("TIPO")
            
        if self.contactPhone and "xxxxx" not in self.contactPhone and len(self.contactPhone) >= 10:
            completed += 1
        else:
            missing.append("TELEFONE")
            
        if self.location and "ser definido" not in self.location.lower() and len(self.location) > 5:
            completed += 1
        else:
            missing.append("ENDERE√áO")
            
        if self.services and "ser√° criada" not in self.services.lower() and "ser definido" not in self.services.lower():
            completed += 1
        else:
            missing.append("SERVI√áOS")
            
        if self.workingHours:
            completed += 1
        else:
            missing.append("HOR√ÅRIOS")
            
        if self.paymentMethods:
            completed += 1
        else:
            missing.append("PAGAMENTO")
            
        if self.personality:
            completed += 1
        else:
            missing.append("PERSONALIDADE")
        
        percentage = int((completed / total_fields) * 100)
        return percentage, missing

class FuncionarioIASimulator:
    def __init__(self):
        self.agent_data = AgentData()
        
    def detectar_nome_inteligente(self, content: str) -> Optional[str]:
        """Detec√ß√£o inteligente de nome com m√∫ltiplas estrat√©gias CORRIGIDA"""
        print(f"    üîç Detectando nome em: '{content}'")
        
        # ESTRAT√âGIA 1: "nome √© X" ou "se chama X" 
        match = re.search(r'(?:nome\s+(?:√©|do\w*)\s*|se\s+chama\s+|chamado\s+|chama\s+)([a-zA-Z√Ä-√ø\s\']{2,40})', content, re.IGNORECASE)
        if match:
            nome = match.group(1).strip()
            # Limpar final comum
            nome = re.sub(r'\s*(?:restaurante|pizzaria|loja|oficina|cl√≠nica)$', '', nome, flags=re.IGNORECASE)
            if len(nome) >= 3:
                print(f"    üìç ESTRAT√âGIA 1 (nome √©/se chama): '{nome}'")
                return nome
        
        # ESTRAT√âGIA 2: Capturar nome completo com tipo "restaurante do amor"
        if any(tipo in content.lower() for tipo in ['restaurante', 'pizzaria']):
            # "tenho um restaurante do amor" -> "restaurante do amor"
            match = re.search(r'(?:tenho\s+um\s+|√©\s+um\s+)?(restaurante\s+[a-zA-Z√Ä-√ø\s\']{2,30})', content, re.IGNORECASE)
            if match:
                nome = match.group(1).strip()
                print(f"    üìç ESTRAT√âGIA 2A (tenho um restaurante X): '{nome}'")
                return nome
            
            # "restaurante do amor" -> "restaurante do amor" 
            match = re.search(r'\b(restaurante\s+[a-zA-Z√Ä-√ø\s\']{2,30})', content, re.IGNORECASE)
            if match:
                nome = match.group(1).strip()
                print(f"    üìç ESTRAT√âGIA 2B (restaurante X): '{nome}'")
                return nome
        
        # ESTRAT√âGIA 3: Nome antes do tipo "amor restaurante"
        match = re.search(r'\b([a-zA-Z√Ä-√ø\s\']{2,30})\s+(restaurante|pizzaria|loja|oficina|cl√≠nica)', content, re.IGNORECASE)
        if match:
            nome = f"{match.group(1)} {match.group(2)}".strip()
            print(f"    üìç ESTRAT√âGIA 3 (X tipo): '{nome}'")
            return nome
        
        # ESTRAT√âGIA 4: Entre aspas
        match = re.search(r'"([a-zA-Z√Ä-√ø\s\']{2,30})"', content)
        if match:
            nome = match.group(1).strip()
            print(f"    üìç ESTRAT√âGIA 4 (aspas): '{nome}'")
            return nome
        
        # ESTRAT√âGIA 5: Palavras capitalizadas (melhorada)
        if not any(palavra in content.lower() for palavra in ['restaurante', 'pizzaria', 'loja', 'oficina', 'cl√≠nica']):
            # Se n√£o tem tipo, procurar por palavras capitalizadas
            match = re.search(r'\b([A-Z√Ä-≈∏][a-zA-Z√Ä-√ø\s\']{2,30}[A-Z√Ä-≈∏][a-zA-Z√Ä-√ø]+)\b', content)
            if match:
                nome = match.group(1).strip()
                # Filtrar palavras comuns
                if not any(palavra in nome.lower() for palavra in ['auto center', 'nome', 'telefone', 'contato']):
                    print(f"    üìç ESTRAT√âGIA 5 (capitalizadas): '{nome}'")
                    return nome
        
        print("    ‚ùå NENHUMA ESTRAT√âGIA DE NOME FUNCIONOU")
        return None

    def analisar_e_atualizar(self, content: str) -> Dict:
        """An√°lise inteligente e atualiza√ß√£o do agent_data - CORRIGIDA"""
        text = content.lower()
        updates = {}
        saved_something = False
        
        print(f"  üß† AN√ÅLISE: '{content}'")
        
        # AUTO-COMPLETAR TEMPLATE PRIMEIRO (mas n√£o sobrescrever nome)
        nome_antes = self.agent_data.businessName
        
        if (('restaurante' in text or 'pizza' in text) and not self.agent_data.businessType):
            print("    üçï Aplicando TEMPLATE RESTAURANTE...")
            template_updates = {
                'businessType': 'restaurante',
                'personality': 'amig√°vel, carinhoso e atencioso',
                'workingHours': 'Segunda a Domingo: 10h √†s 23h',
                'paymentMethods': 'PIX, Cart√£o de cr√©dito, Cart√£o de d√©bito, Dinheiro'
            }
            updates.update(template_updates)
            
            # Aplicar ao objeto
            for key, value in template_updates.items():
                setattr(self.agent_data, key, value)
            
            if not updates.get('services') and "ser√° criada" in self.agent_data.services:
                updates['services'] = 'Card√°pio variado, Delivery, Balc√£o, Reservas dispon√≠veis'
                self.agent_data.services = updates['services']
            
            saved_something = True
            print("    ‚úÖ TEMPLATE RESTAURANTE APLICADO")
        
        elif (('loja' in text or 'venda' in text) and not self.agent_data.businessType):
            print("    üõçÔ∏è Aplicando TEMPLATE LOJA...")
            template_updates = {
                'businessType': 'loja',
                'personality': 'prestativo, atencioso e vendedor',
                'workingHours': 'Segunda a S√°bado: 9h √†s 18h',
                'paymentMethods': 'PIX, Cart√£o de cr√©dito, Cart√£o de d√©bito, Dinheiro',
                'services': 'Produtos variados, Atendimento personalizado, Promo√ß√µes especiais'
            }
            updates.update(template_updates)
            
            for key, value in template_updates.items():
                setattr(self.agent_data, key, value)
            
            saved_something = True
            print("    ‚úÖ TEMPLATE LOJA APLICADO")
        
        elif (('oficina' in text or 'mec√¢nica' in text) and not self.agent_data.businessType):
            print("    üîß Aplicando TEMPLATE OFICINA...")
            template_updates = {
                'businessType': 'oficina',
                'personality': 't√©cnico, confi√°vel e profissional',
                'workingHours': 'Segunda a Sexta: 8h √†s 18h, S√°bado: 8h √†s 12h',
                'paymentMethods': 'PIX, Cart√£o de cr√©dito, Cart√£o de d√©bito, Dinheiro',
                'services': 'Revis√£o geral, Troca de √≥leo, Freios, Suspens√£o, Diagn√≥stico'
            }
            updates.update(template_updates)
            
            for key, value in template_updates.items():
                setattr(self.agent_data, key, value)
            
            saved_something = True
            print("    ‚úÖ TEMPLATE OFICINA APLICADO")
        
        # DETEC√á√ÉO DE NOME (DEPOIS do template para n√£o sobrescrever)
        if (not self.agent_data.businessName or 
            len(self.agent_data.businessName) < 3 or 
            "nome do seu" in self.agent_data.businessName.lower()):
            
            print("    üîç Procurando NOME...")
            nome_detectado = self.detectar_nome_inteligente(content)
            
            if nome_detectado and 3 <= len(nome_detectado) <= 50:
                updates['businessName'] = nome_detectado
                self.agent_data.businessName = nome_detectado
                saved_something = True
                print(f"    ‚úÖ NOME SALVO: '{nome_detectado}'")
        else:
            print("    ‚úÖ Nome j√° existe, pulando")
        
        # DETEC√á√ÉO DE TELEFONE
        if (not self.agent_data.contactPhone or 
            "xxxxx" in self.agent_data.contactPhone or 
            len(self.agent_data.contactPhone) < 10):
            
            print("    üîç Procurando TELEFONE...")
            telefone_patterns = [
                r'(?:telefone|celular|whatsapp|contato|fone|n√∫mero)\D*(\d{10,11})',
                r'\(?\d{2}\)?\s*\d{4,5}[-.\s]?\d{4}',
                r'(\d{11})',
                r'(\d{10})'
            ]
            
            for pattern in telefone_patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                for match in matches:
                    telefone = re.sub(r'\D', '', match.group(1) if match.group(1) else match.group(0))
                    print(f"    üéØ Candidato telefone: '{telefone}'")
                    
                    if 10 <= len(telefone) <= 11 and telefone != '11987654321':
                        updates['contactPhone'] = telefone
                        self.agent_data.contactPhone = telefone
                        saved_something = True
                        print(f"    ‚úÖ TELEFONE SALVO: '{telefone}'")
                        break
                if 'contactPhone' in updates:
                    break
        else:
            print("    ‚úÖ Telefone j√° existe, pulando")
        
        # DETEC√á√ÉO DE ENDERE√áO
        if (not self.agent_data.location or 
            "ser definido" in self.agent_data.location.lower() or 
            len(self.agent_data.location) < 5):
            
            print("    üîç Procurando ENDERE√áO...")
            endereco_patterns = [
                r'(?:endere√ßo|localizado|fica|situado|rua|avenida|av\.?)\s+([^.,!?\n]{8,80})',
                r'(?:^|\s)((?:rua|avenida|av\.?|r\.?)\s+[^.,!?\n]{5,50})'
            ]
            
            for pattern in endereco_patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                for match in matches:
                    endereco = match.group(1).strip()
                    if 5 < len(endereco) < 80:
                        updates['location'] = endereco
                        self.agent_data.location = endereco
                        saved_something = True
                        print(f"    ‚úÖ ENDERE√áO SALVO: '{endereco}'")
                        break
                if 'location' in updates:
                    break
        else:
            print("    ‚úÖ Endere√ßo j√° existe, pulando")
        
        # DETEC√á√ÉO DE SERVI√áOS/CARD√ÅPIO
        if (not self.agent_data.services or 
            "ser√° criada" in self.agent_data.services.lower() or 
            "ser definido" in self.agent_data.services.lower()):
            
            print("    üîç Procurando SERVI√áOS...")
            
            # Detectar n√∫mero de itens
            match = re.search(r'(\d+)\s*(?:sabores?|op√ß√µes?|tipos?|pizzas?|pratos?|itens?)', content, re.IGNORECASE)
            if match:
                numero = match.group(1)
                updates['services'] = f"Card√°pio com {numero} op√ß√µes. Delivery, Balc√£o, Reservas dispon√≠veis"
                self.agent_data.services = updates['services']
                saved_something = True
                print(f"    ‚úÖ SERVI√áOS SALVOS: '{numero} op√ß√µes'")
        else:
            print("    ‚úÖ Servi√ßos j√° existem, pulando")
        
        print(f"  üíæ SALVOU ALGO: {saved_something}")
        print(f"  üîÑ UPDATES: {list(updates.keys())}")
        
        return {
            'updates': updates,
            'saved_something': saved_something
        }

    def gerar_proxima_pergunta(self) -> str:
        """Gera a pr√≥xima pergunta baseada no que est√° faltando"""
        percentage, missing = self.agent_data.get_completion_status()
        
        if percentage == 100:
            return "üéâ Perfeito! Seu funcion√°rio IA est√° 100% configurado!"
        
        # Priorizar perguntas essenciais
        if "NOME" in missing:
            return "Qual √© o nome do seu neg√≥cio?"
        elif "TELEFONE" in missing:
            return f"‚úÖ Nome '{self.agent_data.businessName}' salvo! Qual √© o telefone?"
        elif "ENDERE√áO" in missing:
            return f"‚úÖ Telefone salvo! Qual √© o endere√ßo do {self.agent_data.businessName}?"
        elif "SERVI√áOS" in missing:
            if self.agent_data.businessType == "restaurante":
                return "‚úÖ Endere√ßo salvo! Quantos sabores de pizza voc√™s t√™m?"
            elif self.agent_data.businessType == "loja":
                return "‚úÖ Endere√ßo salvo! Que tipos de produtos voc√™s vendem?"
            elif self.agent_data.businessType == "oficina":
                return "‚úÖ Endere√ßo salvo! Que servi√ßos a oficina oferece?"
            else:
                return "‚úÖ Endere√ßo salvo! Que servi√ßos voc√™s oferecem?"
        else:
            return f"Configura√ß√£o {percentage}% completa! Faltam: {', '.join(missing)}"

    def simular_conversa(self, mensagens_usuario: List[str]) -> None:
        """Simula uma conversa completa"""
        print(f"\n{'='*80}")
        print("üé≠ SIMULA√á√ÉO DE CONVERSA COMPLETA")
        print(f"{'='*80}")
        
        for i, mensagem in enumerate(mensagens_usuario):
            print(f"\nüìù TURNO {i+1}")
            print(f"üë§ USU√ÅRIO: '{mensagem}'")
            
            # Analisar mensagem do usu√°rio
            resultado = self.analisar_e_atualizar(mensagem)
            
            # Verificar status atual
            percentage, missing = self.agent_data.get_completion_status()
            print(f"üìä STATUS: {percentage}% completo - Faltam: {missing}")
            
            # Gerar pr√≥xima pergunta da IA
            proxima_pergunta = self.gerar_proxima_pergunta()
            print(f"ü§ñ IA: {proxima_pergunta}")
            
            print(f"üìã ESTADO ATUAL:")
            estado = self.agent_data.to_dict()
            for key, value in estado.items():
                print(f"  {key}: '{value}'")
            
            if percentage == 100:
                print("\nüéâ CONFIGURA√á√ÉO COMPLETA!")
                break

def teste_fluxo_restaurante():
    """Teste completo: configurar um restaurante"""
    print("TESTE: CONFIGURAR RESTAURANTE COMPLETO")
    
    simulator = FuncionarioIASimulator()
    
    mensagens = [
        "tenho um restaurante do amor",  # Nome + Template
        "o telefone √© 11987654322",     # Telefone
        "fica na rua das flores 123",   # Endere√ßo  
        "temos 50 sabores de pizza"     # Servi√ßos
    ]
    
    simulator.simular_conversa(mensagens)
    return simulator.agent_data

def teste_fluxo_loja():
    """Teste completo: configurar uma loja"""
    print("\nTESTE: CONFIGURAR LOJA COMPLETA")
    
    simulator = FuncionarioIASimulator()
    
    mensagens = [
        "tenho uma loja de roupas",      # Template
        "o nome √© Moda Legal",           # Nome (corrigido)
        "telefone 11888777666",          # Telefone
        "avenida brasil 500",            # Endere√ßo
        "vendemos roupas femininas"      # Servi√ßos
    ]
    
    simulator.simular_conversa(mensagens)
    return simulator.agent_data

def teste_fluxo_oficina():
    """Teste completo: configurar uma oficina"""
    print("\nTESTE: CONFIGURAR OFICINA COMPLETA")
    
    simulator = FuncionarioIASimulator()
    
    mensagens = [
        "oficina mec√¢nica",              # Template
        "se chama Auto Center Silva",    # Nome (corrigido)
        "contato 11777888999",           # Telefone
        "rua s√£o jo√£o 200",              # Endere√ßo
        "fazemos revis√£o completa"       # Servi√ßos adicional
    ]
    
    simulator.simular_conversa(mensagens)
    return simulator.agent_data

if __name__ == "__main__":
    print("TESTE FLUXO COMPLETO - FUNCIONARIO IA")
    print("Simulando conversacoes completas ate 100%")
    
    # Testar todos os fluxos
    restaurante = teste_fluxo_restaurante()
    loja = teste_fluxo_loja()
    oficina = teste_fluxo_oficina()
    
    print(f"\n{'='*80}")
    print("RESUMO DOS TESTES")
    print(f"{'='*80}")
    
    # Resumo restaurante
    perc_rest, missing_rest = restaurante.get_completion_status()
    print(f"RESTAURANTE: {perc_rest}% completo - {restaurante.businessName}")
    
    # Resumo loja  
    perc_loja, missing_loja = loja.get_completion_status()
    print(f"LOJA: {perc_loja}% completo - {loja.businessName}")
    
    # Resumo oficina
    perc_ofic, missing_ofic = oficina.get_completion_status()
    print(f"OFICINA: {perc_ofic}% completo - {oficina.businessName}")
    
    print(f"\nTODOS OS TESTES CONCLUIDOS!") 