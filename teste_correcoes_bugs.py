#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE CORRE√á√ïES DE BUGS - Sistema Funcion√°rioIA
Testa especificamente as corre√ß√µes implementadas
"""

import re

def testar_deteccao_nome_corrigida():
    """Testa se a detec√ß√£o de nome est√° funcionando corretamente"""
    print("=== TESTE DETEC√á√ÉO DE NOME CORRIGIDA ===")
    
    casos_teste = [
        {
            "input": "Tenho um restaurante e quero criar um funcion√°rio IA",
            "esperado": None,  # N√£o deve detectar nome aqui
            "motivo": "N√£o tem nome espec√≠fico"
        },
        {
            "input": "Restaurante do amor",
            "esperado": "Restaurante do amor",
            "motivo": "Nome completo com tipo"
        },
        {
            "input": "‚úÖ Nome 'Restaurante do Amor' salvo no arquivo!",
            "esperado": None,  # Deve ser ignorado
            "motivo": "Resposta da pr√≥pria IA"
        },
        {
            "input": "Qual √© o nome do seu restaurante?",
            "esperado": None,  # Deve ser ignorado
            "motivo": "Pergunta da IA"
        },
        {
            "input": "se chama Pizzaria da Vov√≥",
            "esperado": "Pizzaria da Vov√≥",
            "motivo": "Nome com 'se chama'"
        }
    ]
    
    def detectar_nome_corrigido(content: str):
        # IGNORAR se √© resposta da pr√≥pria IA
        if any(palavra in content for palavra in ['‚úÖ', 'salvo', 'Qual √©', 'arquivo', 'Quais s√£o', 'Como vai ser']):
            return None
        
        # IGNORAR frases que n√£o t√™m nome espec√≠fico
        if any(frase in content for frase in ['quero criar', 'funcion√°rio IA', 'atendimento no WhatsApp']):
            return None
        
        # ESTRAT√âGIA 1: "se chama X" ou "nome √© X" - PRIORIDADE M√ÅXIMA
        match = re.search(r'(?:se\s+chama\s+|nome\s+√©\s+|chamado\s+)([a-zA-Z√Ä-√ø\s\']{3,40})', content, re.IGNORECASE)
        if match:
            nome = match.group(1).strip()
            nome = re.sub(r'\s*(?:restaurante|pizzaria|loja|oficina|cl√≠nica)$', '', nome, flags=re.IGNORECASE)
            nome = re.sub(r'\s*(?:seu|meu|do|da|de|um|uma)$', '', nome, flags=re.IGNORECASE)
            if len(nome) >= 3 and 'restaurante' not in nome.lower() and 'funcion√°rio' not in nome.lower():
                return nome
        
        # ESTRAT√âGIA 2: "Restaurante do Amor" completo (sem palavras gen√©ricas)
        match = re.search(r'\b((?:restaurante|pizzaria|loja|oficina|cl√≠nica)\s+[a-zA-Z√Ä-√ø\s\']{3,30})', content, re.IGNORECASE)
        if match:
            nome = match.group(1).strip()
            if not any(palavra in content.lower() for palavra in ['qual', 'nome do', 'quero', 'funcion√°rio']):
                return nome
        
        return None
    
    sucessos = 0
    total = len(casos_teste)
    
    for i, caso in enumerate(casos_teste, 1):
        resultado = detectar_nome_corrigido(caso['input'])
        
        print(f"\nCASO {i}: {caso['input'][:50]}...")
        print(f"ESPERADO: {caso['esperado']}")
        print(f"RESULTADO: {resultado}")
        print(f"MOTIVO: {caso['motivo']}")
        
        if resultado == caso['esperado']:
            print("‚úÖ PASSOU")
            sucessos += 1
        else:
            print("‚ùå FALHOU")
    
    print(f"\n=== RESULTADO: {sucessos}/{total} testes passaram ===")
    return sucessos == total

def testar_deteccao_endereco_corrigida():
    """Testa se a detec√ß√£o de endere√ßo est√° funcionando"""
    print("\n=== TESTE DETEC√á√ÉO DE ENDERE√áO CORRIGIDA ===")
    
    casos_teste = [
        {
            "input": "avenida do amor, 876",
            "esperado": "avenida do amor, 876",
            "motivo": "Endere√ßo completo"
        },
        {
            "input": "‚úÖ Endere√ßo 'avenida do amor, 876' salvo no arquivo!",
            "esperado": None,
            "motivo": "Resposta da IA deve ser ignorada"
        },
        {
            "input": "do Restaurante do Amor",
            "esperado": None,
            "motivo": "N√£o √© endere√ßo v√°lido"
        },
        {
            "input": "fica na rua das flores 123",
            "esperado": "rua das flores 123",
            "motivo": "Endere√ßo com 'fica na'"
        }
    ]
    
    def detectar_endereco_corrigido(content: str):
        # IGNORAR se √© resposta da pr√≥pria IA
        if any(palavra in content for palavra in ['‚úÖ', 'Qual √©', 'do Restaurante']):
            return None
        
        patterns = [
            r'(?:endere√ßo|localizado|fica|situado|na|no)\s+([a-zA-Z√Ä-√ø\s\d,.-]{8,80})',
            r'\b((?:rua|avenida|av\.?|r\.?)\s+[a-zA-Z√Ä-√ø\s\d,.-]{5,50})'
        ]
        
        for pattern in patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                endereco = match.group(1).strip()
                endereco = re.sub(r'^(na|no|em)\s+', '', endereco, flags=re.IGNORECASE)
                if 8 < len(endereco) < 80 and 'Restaurante' not in endereco:
                    return endereco
        
        return None
    
    sucessos = 0
    total = len(casos_teste)
    
    for i, caso in enumerate(casos_teste, 1):
        resultado = detectar_endereco_corrigido(caso['input'])
        
        print(f"\nCASO {i}: {caso['input']}")
        print(f"ESPERADO: {caso['esperado']}")
        print(f"RESULTADO: {resultado}")
        print(f"MOTIVO: {caso['motivo']}")
        
        if resultado == caso['esperado']:
            print("‚úÖ PASSOU")
            sucessos += 1
        else:
            print("‚ùå FALHOU")
    
    print(f"\n=== RESULTADO: {sucessos}/{total} testes passaram ===")
    return sucessos == total

def testar_filtro_ia():
    """Testa se o sistema ignora respostas da pr√≥pria IA"""
    print("\n=== TESTE FILTRO RESPOSTAS DA IA ===")
    
    respostas_ia = [
        "‚úÖ Nome 'Restaurante do Amor' salvo no arquivo!",
        "Qual √© o telefone do Restaurante do Amor?",
        "üéâ Perfeito! Seu funcion√°rio IA est√° 100% configurado!",
        "‚úÖ Telefone '17991956944' salvo no arquivo!",
        "Quais s√£o os servi√ßos oferecidos?"
    ]
    
    def deve_ignorar(content: str):
        filtros = ['‚úÖ', 'salvo', 'arquivo', 'Qual √©', 'üéâ', 'Perfeito!', 'detectei', 'configurado', 'Quais s√£o']
        return any(filtro in content for filtro in filtros)
    
    sucessos = 0
    
    for i, resposta in enumerate(respostas_ia, 1):
        deve_ser_ignorado = deve_ignorar(resposta)
        
        print(f"\nCASO {i}: {resposta[:40]}...")
        print(f"DEVE SER IGNORADO: {deve_ser_ignorado}")
        
        if deve_ser_ignorado:
            print("‚úÖ CORRETAMENTE IGNORADO")
            sucessos += 1
        else:
            print("‚ùå N√ÉO FOI IGNORADO (ERRO)")
    
    print(f"\n=== RESULTADO: {sucessos}/{len(respostas_ia)} testes passaram ===")
    return sucessos == len(respostas_ia)

def main():
    """Executa todos os testes de corre√ß√£o"""
    print("TESTE COMPLETO DE CORRE√á√ïES DE BUGS")
    print("Verificando se as corre√ß√µes implementadas funcionam...\n")
    
    teste1 = testar_deteccao_nome_corrigida()
    teste2 = testar_deteccao_endereco_corrigida()
    teste3 = testar_filtro_ia()
    
    print(f"\n{'='*60}")
    print("RESUMO DOS TESTES DE CORRE√á√ÉO")
    print(f"{'='*60}")
    print(f"‚úÖ Detec√ß√£o Nome Corrigida: {'PASSOU' if teste1 else 'FALHOU'}")
    print(f"‚úÖ Detec√ß√£o Endere√ßo Corrigida: {'PASSOU' if teste2 else 'FALHOU'}")
    print(f"‚úÖ Filtro Respostas IA: {'PASSOU' if teste3 else 'FALHOU'}")
    
    if teste1 and teste2 and teste3:
        print(f"\nüéâ TODAS AS CORRE√á√ïES FUNCIONANDO!")
        print("Sistema pronto para ser testado novamente")
    else:
        print(f"\n‚ùå ALGUMAS CORRE√á√ïES AINDA PRECISAM DE AJUSTE")
        print("Revisar l√≥gica antes de testar")

if __name__ == "__main__":
    main() 