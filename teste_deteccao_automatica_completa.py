#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTE COMPLETO - DETEC√á√ÉO AUTOM√ÅTICA EXPANDIDA
Sistema de valida√ß√£o para todos os tipos de neg√≥cio do Brasil
"""

import json
from datetime import datetime

# Simula√ß√£o da fun√ß√£o de detec√ß√£o (baseada no TypeScript)
def detect_business_type(message):
    """Detecta o tipo de neg√≥cio baseado em palavras-chave"""
    msg = message.lower()
    
    # Palavras-chave expandidas para todos os neg√≥cios brasileiros
    business_keywords = {
        # PROFISSIONAIS LIBERAIS
        'advogado': ['advogado', 'advogada', 'advocacia', 'direito', 'juridico', 'jur√≠dico', 'lei', 'processo', 'tribunal', 'contrato', 'escrit√≥rio jur√≠dico', 'causas'],
        'contador': ['contador', 'contadora', 'contabilidade', 'cont√°bil', 'imposto', 'declara√ß√£o', 'fiscal', 'tributo'],
        'arquiteto': ['arquiteto', 'arquiteta', 'arquitetura', 'projeto', 'constru√ß√£o', 'planta', 'desenho'],
        'engenheiro': ['engenheiro', 'engenheira', 'engenharia', 'obra', 'constru√ß√£o', 'projeto'],
        'dentista': ['dentista', 'odonto', 'odontologia', 'dente', 'ortodontia', 'canal'],
        
        # SA√öDE E BEM-ESTAR
        'medico': ['m√©dico', 'm√©dica', 'medicina', 'cl√≠nica', 'consult√≥rio', 'sa√∫de', 'consulta', 'exame', 'hospital', 'tratamento', 'pediatra', 'cardiologista'],
        'fisioterapeuta': ['fisioterapeuta', 'fisioterapia', 'reabilita√ß√£o', 'fisio'],
        'psicologo': ['psic√≥logo', 'psic√≥loga', 'psicologia', 'terapia', 'psicoterapia'],
        'veterinario': ['veterin√°rio', 'veterin√°ria', 'pet', 'animal', 'cachorro', 'gato', 'petshop'],
        'farmacia': ['farm√°cia', 'rem√©dio', 'medicamento', 'droga', 'receita', 'manipula√ß√£o'],
        
        # ALIMENTA√á√ÉO
        'restaurante': ['restaurante', 'pizza', 'pizzaria', 'comida', 'lanche', 'lanchonete', 'bar', 'caf√©', 'card√°pio', 'delivery', 'ifood', 'uber eats', 'entrega'],
        'padaria': ['padaria', 'p√£o', 'p√£es', 'doce', 'bolo', 'confeitaria'],
        'acai': ['a√ßa√≠', 'a√ßai', 'vitamina', 'suco', 'smoothie'],
        'hamburgueria': ['hamb√∫rguer', 'hamburgueria', 'burguer', 'lanches'],
        'churrascaria': ['churrascaria', 'churrasco', 'carne', 'rod√≠zio'],
        
        # BELEZA E EST√âTICA
        'salao': ['sal√£o', 'cabelo', 'beleza', 'est√©tica', 'manicure', 'pedicure', 'corte', 'penteado', 'barbearia', 'unha', 'cabeleireiro'],
        'estetica': ['est√©tica', 'est√©tico', 'laser', 'botox', 'preenchimento', 'harmoniza√ß√£o'],
        'massagem': ['massagem', 'massagista', 'relaxante', 'terap√™utica'],
        
        # VAREJO E COM√âRCIO
        'loja': ['loja', 'venda', 'produtos', 'varejo', 'shopping'],
        'roupas': ['roupas', 'moda', 'vestu√°rio', 'cal√ßas', 'camisas', 'vestidos', 'fashion'],
        'calcados': ['cal√ßados', 'sapatos', 't√™nis', 'sand√°lias', 'chinelos'],
        'acessorios': ['acess√≥rios', 'bolsas', 'rel√≥gios', 'joias', 'bijuterias'],
        'eletronicos': ['eletr√¥nicos', 'celular', 'computador', 'tv', 'notebook', 'smartphone'],
        'mercado': ['mercado', 'supermercado', 'mercadinho', 'quitanda', 'hortifruti'],
        
        # SERVI√áOS AUTOMOTIVOS
        'oficina': ['oficina', 'mec√¢nica', 'carro', 'auto', 'conserto', 'manuten√ß√£o', 'pe√ßas', 'motor', 'freio'],
        'lavacao': ['lava√ß√£o', 'lava-jato', 'lavagem', 'enceramento'],
        'borracharia': ['borracharia', 'pneu', 'pneus', 'calibragem'],
        
        # EDUCA√á√ÉO
        'escola': ['escola', 'col√©gio', 'educa√ß√£o', 'ensino', 'curso', 'aula', 'professor', 'professora'],
        'cursinho': ['cursinho', 'pr√©-vestibular', 'vestibular', 'enem'],
        'idiomas': ['idiomas', 'ingl√™s', 'espanhol', 'franc√™s', 'l√≠nguas'],
        
        # CASA E CONSTRU√á√ÉO
        'construcao': ['constru√ß√£o', 'pedreiro', 'obra', 'reforma', 'tijolo', 'cimento'],
        'pintura': ['pintura', 'pintor', 'tinta', 'parede'],
        'eletricista': ['eletricista', 'el√©trica', 'energia', 'instala√ß√£o'],
        'encanador': ['encanador', 'hidr√°ulica', 'cano', 'vazamento', '√°gua'],
        'marcenaria': ['marcenaria', 'marceneiro', 'm√≥veis', 'madeira', 'arm√°rio'],
        
        # TURISMO E HOSPEDAGEM
        'hotel': ['hotel', 'pousada', 'hospedagem', 'quarto', 'reserva', 'turismo', 'viagem'],
        'agencia': ['ag√™ncia de viagens', 'turismo', 'pacotes', 'excurs√£o'],
        
        # TRANSPORTE
        'taxi': ['taxi', 't√°xi', 'uber', 'transporte', 'corrida'],
        'motoboy': ['motoboy', 'entrega', 'delivery', 'moto'],
        'caminhao': ['caminh√£o', 'frete', 'mudan√ßa', 'carga'],
        
        # EVENTOS E ENTRETENIMENTO
        'buffet': ['buffet', 'festa', 'evento', 'casamento', 'anivers√°rio'],
        'musica': ['m√∫sica', 'm√∫sico', 'banda', 'show', 'dj'],
        'fotografia': ['fotografia', 'fot√≥grafo', 'foto', 'casamento', 'book'],
        
        # TECNOLOGIA
        'informatica': ['inform√°tica', 'computador', 't√©cnico', 'software', 'hardware', 'TI'],
        'desenvolvedor': ['desenvolvedor', 'programador', 'site', 'app', 'sistema'],
        
        # AGRICULTURA E PECU√ÅRIA
        'agronegocio': ['agroneg√≥cio', 'fazenda', 'agricultura', 'pecu√°ria', 'gado', 'planta√ß√£o'],
        
        # SERVI√áOS DOM√âSTICOS
        'limpeza': ['limpeza', 'faxina', 'dom√©stica', 'diarista'],
        'lavanderia': ['lavanderia', 'lavagem', 'roupa', 'dry clean'],
        
        # ESPORTES E FITNESS
        'academia': ['academia', 'fitness', 'muscula√ß√£o', 'personal', 'gin√°stica'],
        'esportes': ['esportes', 'futebol', 'nata√ß√£o', 't√™nis', 'v√¥lei'],
        
        # RELIGIOSO
        'igreja': ['igreja', 'pastor', 'religioso', 'casamento', 'batismo']
    }
    
    # Procurar correspond√™ncias
    for business_type, keywords in business_keywords.items():
        if any(keyword in msg for keyword in keywords):
            return business_type
    
    return None

def create_business_response(business_type):
    """Cria resposta personalizada para cada tipo de neg√≥cio"""
    responses = {
        'advogado': "Detectei que voc√™ trabalha com **advocacia**. Vou configurar seu funcion√°rio IA especializado em atendimento jur√≠dico.",
        'contador': "Detectei que voc√™ trabalha com **contabilidade**. Vou configurar seu funcion√°rio IA especializado em servi√ßos cont√°beis.",
        'medico': "Detectei que voc√™ trabalha com **medicina**. Vou configurar seu funcion√°rio IA especializado em atendimento m√©dico.",
        'dentista': "Detectei que voc√™ trabalha com **odontologia**. Vou configurar seu funcion√°rio IA especializado em cuidados dent√°rios.",
        'restaurante': "Detectei que voc√™ trabalha com **alimenta√ß√£o**. Vou configurar seu funcion√°rio IA especializado em delivery e reservas.",
        'farmacia': "Detectei que voc√™ trabalha com **farm√°cia**. Vou configurar seu funcion√°rio IA especializado em medicamentos e delivery.",
        'salao': "Detectei que voc√™ trabalha com **beleza**. Vou configurar seu funcion√°rio IA especializado em agendamentos e cuidados est√©ticos.",
        'oficina': "Detectei que voc√™ trabalha com **servi√ßos automotivos**. Vou configurar seu funcion√°rio IA especializado em manuten√ß√£o veicular.",
        'loja': "Detectei que voc√™ trabalha com **varejo**. Vou configurar seu funcion√°rio IA especializado em vendas e atendimento comercial.",
        'hotel': "Detectei que voc√™ trabalha com **hospedagem**. Vou configurar seu funcion√°rio IA especializado em reservas e turismo."
    }
    
    return responses.get(business_type, f"Detectei que voc√™ trabalha com **{business_type}**. Vou configurar seu funcion√°rio IA especializado nesta √°rea.")

def run_comprehensive_test():
    """Executa teste abrangente com 50+ casos de neg√≥cios brasileiros"""
    print("üöÄ INICIANDO TESTE COMPLETO - DETEC√á√ÉO AUTOM√ÅTICA EXPANDIDA")
    print("=" * 70)
    
    # Casos de teste expandidos - cobrindo todo o Brasil
    test_cases = [
        # PROFISSIONAIS LIBERAIS
        ("oi sou advogado", "advogado"),
        ("trabalho com advocacia", "advogado"),
        ("tenho um escrit√≥rio jur√≠dico", "advogado"),
        ("sou contador", "contador"),
        ("trabalho com contabilidade", "contador"),
        ("fa√ßo declara√ß√£o de imposto", "contador"),
        ("sou arquiteto", "arquiteto"),
        ("trabalho com projetos", "arquiteto"),
        ("sou engenheiro civil", "engenheiro"),
        
        # SA√öDE
        ("sou m√©dico", "medico"),
        ("tenho uma cl√≠nica", "medico"),
        ("sou dentista", "dentista"),
        ("trabalho com odontologia", "dentista"),
        ("sou fisioterapeuta", "fisioterapeuta"),
        ("trabalho com reabilita√ß√£o", "fisioterapeuta"),
        ("sou psic√≥logo", "psicologo"),
        ("fa√ßo terapia", "psicologo"),
        ("sou veterin√°rio", "veterinario"),
        ("cuido de pets", "veterinario"),
        ("tenho uma farm√°cia", "farmacia"),
        ("vendo medicamentos", "farmacia"),
        
        # ALIMENTA√á√ÉO
        ("tenho um restaurante", "restaurante"),
        ("trabalho com delivery", "restaurante"),
        ("tenho uma pizzaria", "restaurante"),
        ("trabalho com comida", "restaurante"),
        ("tenho uma padaria", "padaria"),
        ("vendo p√£es", "padaria"),
        ("trabalho com a√ßa√≠", "acai"),
        ("vendo vitaminas", "acai"),
        ("tenho hamburgueria", "hamburgueria"),
        ("trabalho com lanches", "hamburgueria"),
        
        # BELEZA
        ("tenho um sal√£o", "salao"),
        ("trabalho com cabelo", "salao"),
        ("sou cabeleireiro", "salao"),
        ("trabalho com est√©tica", "estetica"),
        ("fa√ßo harmoniza√ß√£o", "estetica"),
        ("trabalho com massagem", "massagem"),
        
        # VAREJO
        ("tenho uma loja", "loja"),
        ("trabalho com vendas", "loja"),
        ("vendo roupas", "roupas"),
        ("trabalho com moda", "roupas"),
        ("vendo cal√ßados", "calcados"),
        ("trabalho com sapatos", "calcados"),
        ("tenho um mercado", "mercado"),
        ("trabalho com supermercado", "mercado"),
        
        # AUTOMOTIVO
        ("tenho uma oficina", "oficina"),
        ("trabalho com carros", "oficina"),
        ("fa√ßo conserto de auto", "oficina"),
        ("tenho lava-jato", "lavacao"),
        ("trabalho com lavagem", "lavacao"),
        ("tenho borracharia", "borracharia"),
        
        # EDUCA√á√ÉO
        ("tenho uma escola", "escola"),
        ("trabalho com educa√ß√£o", "escola"),
        ("dou aulas", "escola"),
        ("tenho cursinho", "cursinho"),
        ("trabalho com idiomas", "idiomas"),
        
        # CONSTRU√á√ÉO
        ("trabalho com constru√ß√£o", "construcao"),
        ("sou pedreiro", "construcao"),
        ("trabalho com pintura", "pintura"),
        ("sou eletricista", "eletricista"),
        ("sou encanador", "encanador"),
        ("trabalho com marcenaria", "marcenaria"),
        
        # TURISMO
        ("tenho um hotel", "hotel"),
        ("trabalho com hospedagem", "hotel"),
        ("tenho ag√™ncia de viagens", "agencia"),
        
        # TRANSPORTE
        ("trabalho com taxi", "taxi"),
        ("sou motoboy", "motoboy"),
        ("trabalho com frete", "caminhao"),
        
        # EVENTOS
        ("trabalho com buffet", "buffet"),
        ("organizo festas", "buffet"),
        ("sou m√∫sico", "musica"),
        ("sou fot√≥grafo", "fotografia"),
        
        # TECNOLOGIA
        ("trabalho com inform√°tica", "informatica"),
        ("sou desenvolvedor", "desenvolvedor"),
        ("programo sistemas", "desenvolvedor"),
        
        # OUTROS
        ("trabalho com agroneg√≥cio", "agronegocio"),
        ("tenho fazenda", "agronegocio"),
        ("trabalho com limpeza", "limpeza"),
        ("tenho lavanderia", "lavanderia"),
        ("tenho academia", "academia"),
        ("trabalho com fitness", "academia"),
        ("tenho igreja", "igreja"),
        
        # CASOS QUE N√ÉO DEVEM DETECTAR
        ("oi", None),
        ("ol√°", None),
        ("bom dia", None),
        ("tudo bem?", None),
        ("preciso de ajuda", None)
    ]
    
    # Executar testes
    total_tests = len(test_cases)
    correct_detections = 0
    results = []
    
    for i, (message, expected) in enumerate(test_cases, 1):
        detected = detect_business_type(message)
        is_correct = detected == expected
        
        if is_correct:
            correct_detections += 1
            status = "‚úÖ CORRETO"
        else:
            status = "‚ùå ERRO"
        
        result = {
            "test": i,
            "message": message,
            "expected": expected,
            "detected": detected,
            "correct": is_correct,
            "response": create_business_response(detected) if detected else "Perguntaria: Que tipo de estabelecimento voc√™ tem?"
        }
        
        results.append(result)
        
        print(f"{status} | Teste {i:2d}: '{message[:25]:25}' ‚Üí {detected or 'None':15} | Esperado: {expected or 'None'}")
    
    # Estat√≠sticas finais
    accuracy = (correct_detections / total_tests) * 100
    
    print("\n" + "=" * 70)
    print("üìä RELAT√ìRIO FINAL")
    print("=" * 70)
    print(f"‚úÖ Testes corretos: {correct_detections}/{total_tests}")
    print(f"üìà Taxa de acerto: {accuracy:.1f}%")
    print(f"üéØ Meta de acerto: 95%")
    
    if accuracy >= 95:
        print("üèÜ SUCESSO! Sistema aprovado para produ√ß√£o!")
    elif accuracy >= 90:
        print("‚ö†Ô∏è  APROVADO com ressalvas. Considere ajustes nas palavras-chave.")
    else:
        print("‚ùå REPROVADO. Sistema precisa de melhorias significativas.")
    
    # Erros detalhados
    errors = [r for r in results if not r['correct']]
    if errors:
        print(f"\nüîç AN√ÅLISE DE ERROS ({len(errors)} casos):")
        for error in errors[:10]:  # Mostrar at√© 10 erros
            print(f"   ‚Ä¢ '{error['message']}' ‚Üí Detectou: {error['detected']}, Esperado: {error['expected']}")
    
    # Tipos de neg√≥cio detectados
    detected_types = [r['detected'] for r in results if r['detected']]
    unique_types = set(detected_types)
    
    print(f"\nüè™ TIPOS DE NEG√ìCIO DETECTADOS ({len(unique_types)} diferentes):")
    for business_type in sorted(unique_types):
        count = detected_types.count(business_type)
        print(f"   ‚Ä¢ {business_type}: {count} detec√ß√µes")
    
    # Salvar relat√≥rio
    report = {
        "timestamp": datetime.now().isoformat(),
        "total_tests": total_tests,
        "correct_detections": correct_detections,
        "accuracy": accuracy,
        "results": results,
        "detected_types": list(unique_types),
        "summary": {
            "status": "APROVADO" if accuracy >= 95 else "REPROVADO",
            "recommendation": "Pronto para produ√ß√£o" if accuracy >= 95 else "Precisa ajustes"
        }
    }
    
    with open('relatorio_deteccao_completa.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Relat√≥rio salvo: relatorio_deteccao_completa.json")
    return accuracy

if __name__ == "__main__":
    try:
        accuracy = run_comprehensive_test()
        exit(0 if accuracy >= 95 else 1)
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        exit(1) 